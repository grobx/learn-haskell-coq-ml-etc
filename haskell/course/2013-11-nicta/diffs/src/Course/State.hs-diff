1,2c1,5
< {-# LANGUAGE NoImplicitPrelude #-}
< {-# LANGUAGE ScopedTypeVariables #-}
---
> {-
> Created       : by NICTA.
> Last Modified : 2014 Jul 15 (Tue) 10:50:57 by Harold Carr.
> -}
> 
3a7
> {-# LANGUAGE NoImplicitPrelude   #-}
4a9
> {-# LANGUAGE ScopedTypeVariables #-}
8,13d12
< import Course.Core
< import qualified Prelude as P
< import Course.Optional
< import Course.List
< import Course.Functor
< import Course.Apply
14a14
> import           Course.Apply
15a16,18
> import           Course.Core
> import           Course.Functor
> import           Course.List
16a20
> import           Course.Optional
17a22,26
> import qualified Prelude            as P
> 
> import qualified Data.Char          as C (digitToInt)
> import qualified Test.HUnit         as T
> import qualified Test.HUnit.Util    as U
36a46
> -- HC: This requires the Applicative/State instance (for `pure`).
44,45c54,76
<   (<$>) =
<       error "todo"
---
>   f <$> State k = State (\s -> let (a, t) = k s in (f a, t))
> 
> tsf :: [T.Test]
> tsf = U.tt "tsf"
>       [ (+1) <$> (pure       0)
>       , (+1) <$> (Full       0)
>       ,          (Full ((+1) 0))
>       ,          (Full 1)
>       ]
>       (Full 1)
> 
> trs :: [T.Test]
> trs = U.tt "trs"
>       [ runState             ((+1) <$> pure           0)                          0
>       , runState             ((+1) <$> State (\s  -> (0, s))   )                  0
>       , runState (State (\s -> let (a, t) = ((\s' -> (0, s')) s) in ((+1) a, t))) 0
>       ,                 (\s -> let (a, t) = ((\s' -> (0, s')) s) in ((+1) a, t))  0
>       ,                        let (a, t) = ((\s' -> (0, s')) 0) in ((+1) a, t)
>       ,                        let (a, t) =          (0, 0 )     in ((+1) a, t)
>       ,                                                             ((+1) 0, 0)
>       ,                                                             (1     , 0)
>       ]
>       (1,0)
59,60c90,108
<   (<*>) =
<     error "todo"
---
>   State f <*> State a = State (\s -> let (g, t) = f s
>                                          (z, u) = a t
>                                      in (g z, u))
> 
> tap :: [T.Test]
> tap = U.tt "tap"
>       [ runState                              (pure (+1)       <*>           (pure 1))                     45
>       , runState                    ((State (\s -> ((+1), s))) <*>           (pure 1))                     45
>       , runState                    ((State (\s -> ((+1), s))) <*>  (State (\s -> (1, s))))                45
>       , runState (State (\s -> let (g, t) = (\s -> ((+1), s))  s; (z, u) = (\s -> (1, s))  t in (g z, u))) 45
>       ,                 (\s -> let (g, t) = (\s -> ((+1), s))  s; (z, u) = (\s -> (1, s))  t in (g z, u))  45
>       ,                        let (g, t) = (\s -> ((+1), s)) 45; (z, u) = (\s -> (1, s))  t in (g z, u)
>       ,                        let (g, t) =        ((+1),45)    ; (z, u) = (\s -> (1, s))  t in (g z, u)
>       ,                        let (g, _) =        ((+1),45)    ; (z, u) = (\s -> (1, s)) 45 in (g z, u)
>       ,                        let (g, _) =        ((+1),45)    ; (z, u) =        (1,45)     in (g z, u)
>       ,                                                                                       ((+1)1,45)
>       ,                                                                                           (2,45)
>       ]
>       (2,45)
69,70c117
<   pure =
<     error "todo"
---
>   pure a = State (\s -> (a, s))
74a122,126
> --
> -- >>> runState ((\_ -> get) =<< (const $ put 2) =<< put 1) 0
> -- (2,2)
> --
> -- (=<<) :: (a -> f b) -> f a -> f b
80,81c132,184
<   (=<<) =
<     error "todo"
---
>   l =<< State r = State (\s -> let (ra, rs) = r s
>                                in  runState (l ra) rs)
> 
> tbs :: [T.Test]
> tbs = U.tt "tbs"
>       [ runState (                                                            (\_ -> get) =<<  put               1)   0
>       , runState (State (\s -> let (ra, rs) = (\_ -> ((), 1)) s in  runState ((\_ -> get)                    ra) rs)) 0
>       ,                 (\s -> let (ra, rs) = (\_ -> ((), 1)) s in  runState ((\_ -> get)                    ra) rs)  0
>       ,                        let (ra, rs) = (\_ -> ((), 1)) 0 in  runState ((\_ -> get)                    ra) rs
>       ,                        let (ra, rs) = (\_ -> ((), 1)) 0 in  runState ((\_ -> get)                    ra) rs
>       ,                                                             runState ((\_ -> get)                    ()) 1
>       ,                                                             runState ((\_ -> (State (\s -> (s, s)))) ()) 1
>       ,                                                             runState (       (State (\s -> (s, s)))    ) 1
>       ,                                                                                     (\s -> (s, s))       1
>       ]
>       (1,1)
> 
> ts :: ((List Char, List Char), (List Char, List Char))
> ts = runState (
>          get              >>= \(_,h :.t )  ->
>          put (h :.Nil,t ) >>= \_           ->
> 
>          get              >>= \(_,h':.t')  ->
>          put (h':.Nil,t') >>= \_           ->
> 
>          get
> 
>               ) (Nil,'f':.'o':.'o':.Nil)
> 
> tss :: [T.Test]
> tss = U.t "tss"
>       ts
>       (('o':.Nil,'o':.Nil),('o':.Nil,'o':.Nil))
> 
> type Stack a = List a
> 
> pop :: State (Stack a) a
> pop = State $ \(x:.xs) -> (x,xs)
> 
> push :: a -> State (Stack a) ()
> push a = State $ \xs -> ((),a:.xs)
> 
> se :: Num a => State (Stack a) ()
> se =
>     pop       >>= \top   ->
>     push (-1) >>= \_     ->
>     get       >>= \stack ->
>     put (top:.top:.stack)
> 
> tse :: [T.Test]
> tse = U.t "tse2"
>     (runState se (10:.9:.Nil))
>     ((),(10:.10:.(-1):.9:.Nil))
92,93c195,196
< exec =
<   error "todo"
---
> exec (State k) = snd . k
> -- HC: exec (State f) s = snd (f s)
102,103c205,207
< eval =
<   error "todo"
---
> eval (State k) = fst . k
> -- HC: eval (State f) s = fst (f s)
> 
111,112c215
< get =
<   error "todo"
---
> get = State (\s -> (s, s))
121,122c224,247
< put =
<   error "todo"
---
> put = State . const . (,) ()
> -- HC: put p = State (\_ -> ((), p))
> 
> -- | HC
> modify :: (s -> s) -> State s ()
> modify f = get >>= \s -> put (f s)
> 
> -- http://blog.sigfpe.com/2006/05/grok-haskell-monad-transformers.html
> t_f :: (t -> t) -> State t (t, t)
> t_f f =
>     get      >>= \a ->
>     modify f >>= \_ ->
>     get      >>= \b ->
>     pure (a,b)
> 
> t_i :: [T.Test]
> t_i = U.t "t_i"
>       (eval (t_f (+1)) 0)
>       (0,1)
> 
> t_s :: [T.Test]
> t_s = U.t "t_s"
>       (eval (t_f (++ ('1':.Nil))) ('0':.Nil))
>       ('0':.Nil,'0':.'1':.Nil)
143,144c268,316
< findM =
<   error "todo"
---
> findM _ Nil = pure Empty
> findM p (h :. t) = (\b -> if b then pure (Full h) else findM p t) =<< (p h)
> 
> tp :: Num s => Char -> State s Bool
> tp x = (\s -> (const $ pure (x == 'a')) =<< put (1+s)) =<< get
> 
> -- :t (findM tp $ listh ['a'])
> -- => (findM tp $ listh ['a']) :: Num s => State s (Optional Char)
> 
> ttp :: [T.Test]
> ttp = U.tt "ttp"
>       [ runState (tp                                                                               'a'                                                               ) 0
>       , runState (                                                           (\s -> (const $ pure ('a' == 'a')) =<<              put (1+s))  =<< get                 ) 0
>       , runState (                                                           (\s -> (const $ pure ('a' == 'a')) =<<              put (1+s))  =<< State (\s -> (s, s))) 0
>       , runState (                                                           (\s -> (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+s))) =<< State (\s -> (s, s))) 0
>       , runState (                                                           (\s -> (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+s))) =<< State (\s -> (s, s))) 0
>       , runState (State (\s -> let (ra, rs) = (\s -> (s, s)) s in  runState ((\s -> (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+s))) ra) rs))                  0
>       ,                 (\s -> let (ra, rs) = (\s -> (s, s)) s in  runState ((\s -> (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+s))) ra) rs)                   0
>       ,                        let (ra, rs) = (\s -> (s, s)) 0 in  runState ((\s -> (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+s))) ra) rs
>       ,                        let (ra, rs) =        (0, 0)    in  runState ((\s -> (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+s))) ra) rs
>       ,                                                            runState ((\s -> (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+s)))  0) 0
>       ,                                                            runState (       (const $ pure ('a' == 'a')) =<< State (\_ -> ((), 1+0)))     0
>       ,     runState (State (\s -> let (ra, rs) = (\_ -> ((), 1+0)) s in  runState ((const $ pure ('a' == 'a')) ra) rs))                         0
>       ,                     (\s -> let (ra, rs) = (\_ -> ((), 1+0)) s in  runState ((const $ pure ('a' == 'a')) ra) rs)                          0
>       ,                            let (ra, rs) = (\_ -> ((), 1+0)) 0 in  runState ((const $ pure ('a' == 'a')) ra) rs
>       ,                                                                   runState ((const $ pure ('a' == 'a')) ()) 1
>       ,                                                                   runState ((const $ pure (True      )) ()) 1
>       ,                                                                   runState ((const $ State (\s -> (True, s))) ()) 1
>       --, TODO: gets type errors : but I swear this is reduction:         runState (         State (\s -> (True, s))    ) 1
>       ,                                                                                            (\s -> (True, s))      1
>       ]
>       (True,1)
> 
> tfM :: [T.Test]
> tfM = U.tt "tfM"
>       [ runState (findM                                                                                                    tp $     listh ['a'])                  0
>       , runState (                                                             (\b -> if b    then pure (Full 'a') else findM tp Nil) =<< (tp 'a'))               0
>       , runState (                                                             (\b -> if b    then pure (Full 'a') else findM tp Nil) =<< State (\s -> (True,1))) 0
>       ,                 (\s -> let (ra, rs) = (\s -> (True,1)) s in  runState ((\b -> if b    then pure (Full 'a') else findM tp Nil)   ra) rs)                   0
>       ,                        let (ra, rs) = (\s -> (True,1)) 0 in  runState ((\b -> if b    then pure (Full 'a') else findM tp Nil)   ra) rs
>       ,                        let (ra, rs) =        (True,1)    in  runState ((\b -> if b    then pure (Full 'a') else findM tp Nil)   ra) rs
>       ,                                                              runState ((\b -> if b    then pure (Full 'a') else findM tp Nil) True) 1
>       ,                                                              runState (       if True then pure (Full 'a') else findM tp Nil)       1
>       ,                                                              runState (                    pure (Full 'a')                  )       1
>       ,                                                              runState (            State (\s -> (Full 'a', s))              )       1
>       ,                                                                                          (\s -> (Full 'a', s))                      1
> 
>       ]
>       (Full 'a',1)
157,158c329,342
< firstRepeat =
<   error "todo"
---
> firstRepeat = listWithState findM S.member
> 
> firstRepeatC :: Ord a => List a -> Optional a
> firstRepeatC x = eval (findM (\a -> State (S.member a &&& S.insert a)) x) S.empty
> 
> firstRepeatHC ::
>   Ord a =>
>   List a
>   -> Optional a
> firstRepeatHC la = eval (findM rp la) S.empty
> 
> -- Note: the put/insert/s is not the Set seen by the predicate (the next monadic use of the predicate will see it)
> rp :: Ord a => a -> State (S.Set a) Bool
> rp x = (\s -> (const $ pure (S.member x s)) =<< put (S.insert x s)) =<< get
170,171c354,371
< distinct =
<   error "todo"
---
> distinct = listWithState filtering S.notMember
> 
> listWithState ::
>   Ord a1 =>
>   ((a1 -> State (S.Set a1) a2)
>   -> t
>   -> State (S.Set a3) a)
>   -> (a1 -> S.Set a1 -> a2)
>   -> t
>   -> a
> listWithState f m x =
>   eval (f (State . lift2 (lift2 (,)) m S.insert) x) S.empty
> 
> distinctTwo ::
>   Ord a =>
>   List a
>   -> List a
> distinctTwo x = eval (filtering (\a -> State (S.notMember a &&& S.insert a)) x) S.empty
177,180c377,378
< -- /Tip:/ Use `findM` with `State` and `produce`.
< --
< -- /Tip:/ Use `flatten` to write a @square@ function.
< --
---
> -- /Tip:/ Use `first` and `produce`.
> ----
198c396,477
<   error "todo"
---
>   contains 1 .
>     firstRepeat .
>     produce (toInteger .
>              sum .
>              map (join (*) . 
>                   digitToInt) .
>              show')
> 
> -- | HC: OLD: A happy number is a positive integer, where the sum of the square of its digits eventually reaches 1 after repetition.
> -- In contrast, a sad number (not a happy number) is where the sum of the square of its digits never reaches 1
> -- because it results in a recurring sequence.
> --
> -- /Tip:/ Use `findM` with `State` and `produce`.
> --
> -- /Tip:/ Use `flatten` to write a @square@ function.
> --
> -- /Tip:/ Use library functions: @Optional#contains@, @Data.Char#digitToInt@.
> --
> -- >>> isHappyOld 4
> -- False
> --
> -- >>> isHappyOld 7
> -- True
> --
> -- >>> isHappyOld 42
> -- False
> --
> -- >>> isHappyOld 44
> -- True
> {-
> isHappy :: Integer -> Bool
> isHappy x = case runState (findM ih (produce sumOfSquares x)) S.empty of
>                 (Empty , _) -> error "can this happen?"
>                 (Full v, _) -> v == 1
> -}
> isHappyC :: Integer -> Bool
> isHappyC = contains 1 . (`eval` S.empty) .
>                findM (\j -> State $ \s -> (j == 1 || S.member j s, S.insert j s)) .
>                    produce (P.sum . (<$>) (join (*) . toInteger . digitToInt) . show)
> 
> isHappyOld ::
>   Integer
>   -> Bool
> isHappyOld x = contains 1 $ eval (findM ih (produce sumOfSquares x)) S.empty
> 
> ih :: Integer -> State (S.Set Integer) Bool
> ih x = (\s -> (const $ pure (S.member x s)) =<< put (S.insert x s)) =<< get
> 
> sumOfSquares :: Integer -> Integer
> sumOfSquares = sumOfSquares' 0 . show
>   where
>     sumOfSquares' acc [] = P.toInteger acc
>     sumOfSquares' acc (x:xs) = sumOfSquares' (((P.^) (C.digitToInt x) 2) + acc) xs
> {-
> sumOfSquares 4
> sumOfSquares 16
> sumOfSquares 37
> sumOfSquares 58
> sumOfSquares 89
> sumOfSquares 145
> sumOfSquares 42
> sumOfSquares 20
> sumOfSquares 4
> 
> sumOfSquares 7
> sumOfSquares 49
> sumOfSquares 97
> sumOfSquares 130
> sumOfSquares 10
> sumOfSquares 1
> 
> produce sumOfSquares 7
> -}
> 
> ------------------------------------------------------------------------------
> 
> testState :: IO T.Counts
> testState =
>     T.runTestTT P.$ T.TestList P.$ tsf P.++ trs P.++ tap P.++ tbs P.++ tss P.++ tse P.++ t_i P.++ t_s P.++ ttp P.++ tfM
> 
> -- End of file.
> 
