I looked around at my bookmarks and then did some new searches.

Here is what I would recommend:

-------------------------
1 https://leanprover.github.io/logic_and_proof/introduction.html

This book uses a new theorem prover called "Lean" from Microsoft Research.

I like the fact that it gives good background and proceeds in a step-by-step manner and the entire thing can be run online (so nothing to install --- although you can run it on your own computer, which is what I would do --- I don't like online stuff, I like my emacs keybindings).

The only disappointment is that it is yet another language/system --- but the system looks very clean and the presentation is excellent.

-------------------------
2 http://www.dcs.gla.ac.uk/~jtod/discrete-mathematics/

This uses Haskell.
You end up writing Haskell code explicitly.
It is NOT a theorem prover.

I have attached a PDF of the book.

-------------------------
3 https://homepages.cwi.nl/~jve/HR/

This also uses Haskell with explicit code (no theorem prover).

I have attached a PDF copy of the book.
The solutions to exercise is available at: https://homepages.cwi.nl/~jve/HR/JustSOL.pdf

-------------------------
4. https://plfa.github.io/

Just Part 1.

I uses the language/theorem prover Agda.

Agda is a theorem prover, but borrows a lot from Haskell.
(aside: another language that borrows from Haskell and is the "next generation" of Haskell
is Idris, but Idris is not ready for production use : https://www.idris-lang.org/)

I would like to learn Agda. But I doubt you want to use this.

-------------------------

There is also : https://www3.cs.stonybrook.edu/~skiena/combinatorica/

but it uses a proprietary language and system that costs $$.


==============================================================================

This book looks great:
    https://www.amazon.com/Elements-Computing-Systems-Building-Principles/dp/0262640686

There is a free online version:
    http://f.javier.io/rep/books/The%20Elements%20of%20Computing%20Systems.pdf

And a web site to get the software materials:
    https://www.nand2tetris.org/

And free courses that use it.

This one does the first half of the book:
    https://www.coursera.org/learn/build-a-computer

THis one does the second half of the book:
    https://www.coursera.org/learn/nand2tetris2

I skimmed though it and it seems you will really understand computers from the hardware up to the languages and operating systems.

It doesn't cover networking or databases or security, etc.  But it seems like a great place to start.

==============================================================================

https://teachyourselfcs.com/


==============================================================================
data61 fp-course

Besides studying Course.ExactlyOne and Course.Validation, the first
one with exercises is Course.Optional

In the src/Course/Optional.hs file you replace the function definition
bodies that containt : error "todo:..." with the definition you come
up with.

Then you can test via:

> cd ~
> cd fp-course
> stack ghci

...
[ 1 of 26] Compiling Course.Core      ( src/Course/Core.hs, interpreted )
...
[26 of 26] Compiling Course           ( src/Course.hs, interpreted )
...
λ: :l test/Course/OptionalTest.hs
[1 of 5] Compiling Course.Core      ( src/Course/Core.hs, interpreted )
...
[5 of 5] Compiling Course.OptionalTest ( test/Course/OptionalTest.hs, interpreted )
Ok, five modules loaded.
λ: courseTest test_Optional

FAILED: 'Optional.mapOptional.Empty'
  todo: Course.Optional#mapOptional
  CallStack (from HasCallStack):
    error, called at src/Course/Optional.hs:31:3 in main:Course.Optional
...
WARNING: No properties tested
λ:
