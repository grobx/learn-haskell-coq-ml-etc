
# Created       : 2013 Aug 28 (Wed) 06:58:30 by carr.
Last Modified : 2013 Aug 28 (Wed) 12:24:39 by carr.


------------------------------------------------------------------------------
* 2013-08-28 meeting with Tim Watson

** who uses it? for what?

Jeff Epstein - original implementor - advisors: Andrew Black (Portland U) /SimonPJ
- SimonPJ hired well-typed to do 2nd impl
- Jeff is CTO of company Parallel Scientific using Cloud Haskell

Few other commericial developers looking at it.

Well-typed people:
- maybe have some work around it - early conversation phase


** Missing high-level API
- OTP easier to build FT systems
- e.g., easy to do, say, K-means (declarative)

** Two things the most asked
- nodes
- ports
- process
- channels

** Actors (like Akka)
- concurrency model
- no shared state + msg passing

** who works on it? - why/motivation?

Well-typed original : Edsko (well typed consultant - now working on GHC, and teaching/consultancy)
- no longer funded - but still a mentor to Tim (and steering role)

Jeff Epstein - developing stuff for clients
- external libraries - global transactions/locking
- had disagreements with people at Well-Typed regarding funding/billing
- owner of project (but currently does not have commit rights)

Tim Watson
- primary committer/maintainer (12 projects)
- two releases
- changes in core
- features
- but fixing
- developed OTP layer
- not much the last couple of months
- Tim's motivation
  - dayjob is Erlang eng on RabbitMQ (originally from lshift, then SpringSource when he joined, then VMWare, now Pivotal)
  - been interested in Haskell (OCaml, Erlang)
  - accidental
  - went to Haskell Exchange in London (Skills Matter)
    - Duncan Coutes talked about Cloud Haskell
    - loved it, asked lots of questions during talk
      - talked with him after talk - then SimonPJ came over too
    - curious how to do in Haskell what is done in Erlang
  - complexity in semantics, but already know from Erlang
  - SimonPJ asked him to be OSS project leader
- have talked about relocating to U.S.
- previous employer was British Telecom
- wife wants to move to Oregon (her friends live in Vancouver, Washington)
- motivation: go to niche thing (Erlang)
  - contacted for interesting jobs
- Portland: Intel/Haskell/formal verification/modeling; Galois

Some guy

Basho guy
- Reed Draper

** Any funding on horizon?
- Duncan (head of Well-Typed) - asked Tim if he was interested in working full-time as consultant
  - working with FPComplete to get funding
- MS research
- [[http://www.parsci.com/][Parallel Scientific]]
  - built for cloud-haskell: CCI backend
  - CH -> CCI (already does pluggable transports and and specific transports) -> other networks

Need to build stronger bridge to Jeff - get him back on board

** CCI

[[https://www.olcf.ornl.gov/center-projects/common-communication-interface/][CCI]]

Tim's Management extensions
- inspired by JMX
- attach debugger

** questions?

how does one configure modules on all nodes?
- current: to send closure - node must be running exactly same executable
- function closures : based on statics : done at library level
  - idea of static value needs to work into GHC (so end up with something to send over wire)
  - serialize fingerprint to find it on other side - and pointer to thunk that represents computation

- tim mostly does not send closures - sends data
  - via channels
  - process has 1 inbox, 1 channel with single reader/writer
  - but unlimited typed channels (besides mailbox)


- is sending function closures a security risk?
  - YES
  - maybe encrypt transport and use certificates
  - Tim's inclination: delegate security to backend
  - cluster setup is hard now - backend does control/info of topology
  - simplelocalnet : broadcast address

----

when did Tim start working on CH?
- Oct 2012

Emacs
- ECB
- mode line: TestCH.hs 13% (<row>,<col>) Git-mx Haskell Ind ws AC Flymake Doc

- CH : cloud haskell
- MX : working name for distributed process mgmt (version of JMX)
- NT : network transport

Erlang OTP learning recommendations
- learnyousomeerlang.com
  [[http://learnyousomeerlang.com/what-is-otp#its-the-open-telecom-platform]] go to What is OTP?
